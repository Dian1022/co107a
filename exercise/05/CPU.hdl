// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //decode        //控制所有c圓圈圈
    Or(a =false , b = instruction , out[15]= isC, out[12] = a, out[11] = c1 , out[10] = c2 , out[9] = c3, out[8] = c4, out[7]=c5, out[6]=c6, 
         out[5]=d1, out[4]=d2, out[3]=d3, out[2]=j1, out[1]=j2, out[0]=j3);  
         
    //A register
    Not(a = isC, out = isA);     //要嘛是C或A型指令
    And(a=isC, b=d1, out=AluToA); //d1是目標  要寫進哪些暫存器的  當這兩個成立時才能被寫進A register
    Or(a=isA, b=AluToA, out=Aload);//因為他有兩種狀態所以要擇一
    
    Mux16(a=instruction, b=ALUout, sel=isC, out=Ain); //新的指令跟舊的指令二擇一
    
    ARegister(in=Ain, load=Aload, out=Aout, out[0..14]=addressM);   // Aload = isA(out[15] = 0)| (isC & d1)(out[15] = 1)  addressM=Aout[0..14](位置)
    
     // D register
    And(a=isC, b=d2, out=Dload);    //  d2是目標  要寫進哪些暫存器的  當這兩個成立時才能被寫進D register
    DRegister(in=ALUout, load=Dload, out=Dout);  // Dload = isC & d2 Dload(out[15] = 1) Dout= out[0...14]
    
    // ALU
    Mux16(a=Aout, b=inM, sel=a, out=AorM);      //選擇Data(新資料) ? A ? Memery(舊資料) ? sel = 1 寫入b sel = 0 寫入a
    ALU(x=Dout, y=AorM, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=ALUout, out=outM, zr=zr, ng=ng);   //做運算  要查表
    
    // JUMP condition 
    Or(a=ng, b=zr, out=ngzr);             // 擇一
    Not(in=ngzr, out=gt);                  // g = out > 0 = !(ng | zr);  ng = (out < 0);  zr = (out = 0)  gt一定會大於0
    And(a=ng, b=j1, out=passLT);          // passLT = (ng & LT)  j1 = out < 0 jump
    And(a=zr, b=j2, out=passEQ);          // passEQ = (zr & EQ)  j2 = out = 0 jump
    And(a=gt, b=j3, out=passGT);          // passGT = (gt & GT)  j3 = out > 0 jump 
    Or(a=passLT, b=passEQ, out=passLE);   //擇一
    Or(a=passLE, b=passGT, out=pass);     //擇一
    And(a=isC, b=pass, out=PCload);       // PCload = isC & pass(上面全部的pass)   寫進PC的
    PC(in=Aout, load=PCload, inc=true, reset=reset, out[0..14]=pc); // PCload = isC & ((ng&j1) | (zr&j2) | (!ng&!zr&j3))
    
     // output
    And(a=isC, b=d3, out=writeM);         // writeM = isC & d3是M  是決定要不要讓後面的記憶體寫入的東西
}
